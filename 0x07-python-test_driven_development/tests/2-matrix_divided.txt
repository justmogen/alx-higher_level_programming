Test case:
matrix_divided will need user to specify a matrix and a div(dividion) number

import dividing module first:
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Usage:

Normal:
>>> matrix = [ [1, 2, 3], [9, 8, 6]]
>>> print (matrix_divided(matrix, 2))
[[0.5, 1.0, 1.5], [4.5, 4.0, 3.0]]

print the original matrix
>>> print(matrix)
[[1, 2, 3], [9, 8, 6]]

Using float elements:
>>> matrix = [
...     [2.3, -2.9, 20.0],
...     [1.5, 2.8, 11.8]
... ]
>>> print(matrix_divided(matrix, 2))
[[1.15, -1.45, 10.0], [0.75, 1.4, 5.9]]

current matrix
>>> print(matrix)
[[2.3, -2.9, 20.0], [1.5, 2.8, 11.8]]

Using a string:
>>> matrix = "a string"
>>> print(matrix_divided(matrix, 6))
Traceback (most recent call last):
    ...
    raise TypeError(output)
TypeError: matrix must be a matrix (list of lists) of integers/floats

Empty list
>>> matrix = []
>>> print(matrix_divided(matrix, 6))
[]

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 6))
[[]]

No input
>>> matrix = None
>>> print(matrix_divided(matrix, 6))
Traceback (most recent call last):
  ...
    for lists in matrix:
TypeError: 'NoneType' object is not iterable

Strings:
>>> matrix = [
...     [32.2, "ju2", 33],
...     [90, "kil", 22]
... ]
>>> print(matrix_divided(matrix, 4))
Traceback (most recent call last):
  ... 
   raise TypeError(output)
TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing using zero:
>>> matrix = [
...     [90, 23, 22],
...     [9, 3, 220]
... ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
  ...
    raise ZeroDivisionError("division by zero")
ZeroDivisionError: division by zero

Using wrong lists length:
>>> matrix = [
...     [9, 3, 220, 2],
...     [99, 13, 22]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
  ...
    raise TypeError(output1)
TypeError: Each row of the matrix must have the same size
